import logging
import aiohttp
import os
import json
from pathlib import Path
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from aiogram.types import BotCommand, BotCommandScopeDefault
import asyncio
from aiogram.utils.keyboard import InlineKeyboardBuilder

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ .env
env_path = Path('.') / '.env'
if not env_path.exists():
    print(f"‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {env_path.absolute()}")
    print("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º:")
    print("TELEGRAM_BOT_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω_–±–æ—Ç–∞")
    print("OPENROUTER_API_KEY=sk-or-–≤–∞—à_–∫–ª—é—á")
    exit(1)

load_dotenv(env_path)

API_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
OPENROUTER_API_KEY = os.getenv('OPENROUTER_API_KEY3')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ)
AVAILABLE_MODELS = {
    "Deepseek-V3": "deepseek/deepseek-chat-v3-0324:free",
    "Deepseek-R1": "deepseek/deepseek-r1-0528:free",
    "Qwen3-coder": "qwen/qwen3-coder:free",
    "Gemini-2.0-flash": "google/gemini-2.0-flash-exp:free",
    "Qwen3": "qwen/qwen3-235b-a22b:free",
    "GPT-4o mini": "openai/gpt-4o-mini"
}

# –ú–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DEFAULT_MODEL = "deepseek/deepseek-chat-v3-0324:free"

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π (–≤ –ø–∞–º—è—Ç–∏)
user_models = {}


def get_user_model(user_id):
    """–ü–æ–ª—É—á–∏—Ç—å –º–æ–¥–µ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    return user_models.get(user_id, DEFAULT_MODEL)


async def set_main_menu():
    """–°–æ–∑–¥–∞–µ–º –º–µ–Ω—é –∫–æ–º–∞–Ω–¥"""
    main_menu_commands = [
        BotCommand(command='/start', description='–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞'),
        BotCommand(command='/help', description='–ü–æ–º–æ—â—å –∏ –∫–æ–º–∞–Ω–¥—ã'),
        BotCommand(command='/models', description='–í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å –ò–ò'),
        BotCommand(command='/currentmodel', description='–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å'),
    ]
    await bot.set_my_commands(main_menu_commands, scope=BotCommandScopeDefault())


@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer(
        "ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI Chat Bot!</b>\n\n"
        "–Ø –∏—Å–ø–æ–ª—å–∑—É—é —Ä–∞–∑–ª–∏—á–Ω—ã–µ —è–∑—ã–∫–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã.\n\n"
        "üîß <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/models - –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å –ò–ò\n"
        "/currentmodel - –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å\n"
        "/help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥!"
    )


@dp.message(Command("help"))
async def help_command(message: types.Message):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    help_text = (
        "üõ†Ô∏è <b>–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:</b>\n\n"
        "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/models - –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å –ò–ò –∏–∑ —Å–ø–∏—Å–∫–∞\n"
        "/currentmodel - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å\n\n"
        "üìö <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:</b>\n"
    )

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
    for model_name in AVAILABLE_MODELS.keys():
        help_text += f"‚Ä¢ {model_name}\n"

    help_text += "\n–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –ò–ò."

    await message.answer(help_text)


@dp.message(Command("models"))
async def list_models(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π —Å –≥–∞–ª–æ—á–∫–æ–π —É —Ç–µ–∫—É—â–µ–π"""
    await show_models_keyboard(message, message.from_user.id)


async def show_models_keyboard(message: types.Message, user_id: int, edit: bool = False):
    """–ü–æ–∫–∞–∑–∞—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–æ–¥–µ–ª—è–º–∏"""
    builder = InlineKeyboardBuilder()

    current_model_id = get_user_model(user_id)

    for model_name, model_id in AVAILABLE_MODELS.items():
        # –î–æ–±–∞–≤–ª—è–µ–º –≥–∞–ª–æ—á–∫—É –∫ —Ç–µ–∫—É—â–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
        prefix = "‚úÖ " if model_id == current_model_id else ""
        builder.button(text=f"{prefix}{model_name}", callback_data=f"model_{model_id}")

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è
    builder.button(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_menu")

    builder.adjust(2, 2, 1)  # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫: 2 –≤ –ø–µ—Ä–≤–æ–º —Ä—è–¥—É, 2 –≤–æ –≤—Ç–æ—Ä–æ–º, 1 –≤ —Ç—Ä–µ—Ç—å–µ–º

    current_model_name = next((k for k, v in AVAILABLE_MODELS.items() if v == current_model_id), current_model_id)

    if edit:
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.edit_text(
            f"üõ†Ô∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:</b>\n"
            f"üîß –¢–µ–∫—É—â–∞—è: {current_model_name}\n\n"
            f"<i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –º–æ–¥–µ–ª—å –¥–ª—è –≤—ã–±–æ—Ä–∞</i>",
            reply_markup=builder.as_markup()
        )
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(
            f"üõ†Ô∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:</b>\n"
            f"üîß –¢–µ–∫—É—â–∞—è: {current_model_name}\n\n"
            f"<i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –º–æ–¥–µ–ª—å –¥–ª—è –≤—ã–±–æ—Ä–∞</i>",
            reply_markup=builder.as_markup()
        )


@dp.callback_query(F.data.startswith("model_"))
async def set_model_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏"""
    model_id = callback.data.split("_", 1)[1]
    user_id = callback.from_user.id

    if model_id in AVAILABLE_MODELS.values():
        user_models[user_id] = model_id
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –≤—ã–±–æ—Ä–æ–º
        await show_models_keyboard(callback.message, user_id, edit=True)
        await callback.answer(f"–ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞")
    else:
        await callback.answer("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å", show_alert=True)


@dp.callback_query(F.data == "close_menu")
async def close_menu_callback(callback: types.CallbackQuery):
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏"""
    await callback.message.delete()
    await callback.answer("–ú–µ–Ω—é –∑–∞–∫—Ä—ã—Ç–æ")

@dp.message(Command("currentmodel"))
async def current_model(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å"""
    model_id = get_user_model(message.from_user.id)
    model_name = next((k for k, v in AVAILABLE_MODELS.items() if v == model_id), model_id)
    await message.answer(f"üîß –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: <b>{model_name}</b>")


@dp.message()
async def handle_message(message: types.Message):
    if not message.text:
        return await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞..."
    status_msg = await message.answer(
        f"<i>ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.</i>",
        parse_mode=ParseMode.HTML
    )

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "–ø–µ—á–∞—Ç–∞–µ—Ç" –≤ —á–∞—Ç–µ
    await bot.send_chat_action(message.chat.id, "typing")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        model_id = get_user_model(message.from_user.id)

        headers = {
            "Authorization": f"Bearer {OPENROUTER_API_KEY}",
            "HTTP-Referer": "https://your-telegram-bot.com",
            "X-Title": "Telegram Bot",
            "Content-Type": "application/json"
        }

        payload = {
            "model": model_id,
            "messages": [{"role": "user", "content": message.text}]
        }

        async with aiohttp.ClientSession() as session:
            async with session.post(
                    "https://openrouter.ai/api/v1/chat/completions",
                    headers=headers,
                    json=payload
            ) as response:
                if response.status != 200:
                    error = await response.text()
                    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ—à–∏–±–∫–∏
                    await status_msg.delete()
                    return await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API: {error[:200]}...")

                data = await response.json()

                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await status_msg.delete()

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –º–æ–¥–µ–ª–∏
                model_name = next((k for k, v in AVAILABLE_MODELS.items() if v == model_id), model_id)
                response_text = f"üß† <b>{model_name}</b>:\n\n"
                response_text += data['choices'][0]['message']['content']

                await message.answer(response_text)

    except Exception as e:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        await status_msg.delete()
        await message.answer(f"üö´ –û—à–∏–±–∫–∞: {str(e)}")


async def main():
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
    await set_main_menu()

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    print(f"–¢–æ–∫–µ–Ω –±–æ—Ç–∞: {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if API_TOKEN else '–ù–ï–¢'}")
    print(f"–ö–ª—é—á OpenRouter: {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if OPENROUTER_API_KEY else '–ù–ï–¢'}")
    print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: {', '.join(AVAILABLE_MODELS.keys())}")
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())