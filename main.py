import logging
import aiohttp
import os
import json
import re
import html
import base64
from io import BytesIO
from pathlib import Path
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode, ContentType
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from aiogram.types import BotCommand, BotCommandScopeDefault, URLInputFile
import asyncio
from aiogram.utils.keyboard import InlineKeyboardBuilder

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ .env
env_path = Path('.') / '.env'
if not env_path.exists():
    print(f"‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {env_path.absolute()}")
    print("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º:")
    print("TELEGRAM_BOT_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω_–±–æ—Ç–∞")
    print("OPENROUTER_API_KEY=sk-or-–≤–∞—à_–∫–ª—é—á")
    exit(1)

load_dotenv(env_path)

API_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
OPENROUTER_API_KEY = os.getenv('OPENROUTER_API_KEY3')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–π
if not API_TOKEN or not OPENROUTER_API_KEY:
    print("‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤ .env –µ—Å—Ç—å TELEGRAM_BOT_TOKEN –∏ OPENROUTER_API_KEY")
    exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ (–º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–µ –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ image_support=True)
AVAILABLE_MODELS = {
    "Deepseek-V3": {
        "id": "deepseek/deepseek-chat-v3-0324:free",
        "image_support": False
    },
    "Deepseek-R1": {
        "id": "deepseek/deepseek-r1-0528:free",
        "image_support": False
    },
    "Qwen3-coder": {
        "id": "qwen/qwen3-coder:free",
        "image_support": False
    },
    "Gemini-2.0-flash": {
        "id": "google/gemini-2.0-flash-exp:free",
        "image_support": True
    },
    "Qwen3": {
        "id": "qwen/qwen3-235b-a22b:free",
        "image_support": False
    },
    "GPT-4o mini": {
        "id": "openai/gpt-4o-mini",
        "image_support": True
    }
}

# –ú–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DEFAULT_MODEL = "deepseek/deepseek-chat-v3-0324:free"

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π (–≤ –ø–∞–º—è—Ç–∏)
user_models = {}


def convert_markdown_to_html(text: str) -> str:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç Markdown-—Ä–∞–∑–º–µ—Ç–∫—É –≤ HTML-—Ç–µ–≥–∏"""
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML-—Å–∏–º–≤–æ–ª—ã
    text = html.escape(text)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–ª–æ–∫–∏ –∫–æ–¥–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —è–∑—ã–∫–∞
    text = re.sub(
        r'```(\w+)?\s*\n(.+?)```', 
        r'<pre><code>\2</code></pre>', 
        text, 
        flags=re.DOTALL
    )
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–ª–æ–∫–∏ –∫–æ–¥–∞ –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è —è–∑—ã–∫–∞
    text = re.sub(
        r'```([^`]+?)```', 
        r'<pre><code>\1</code></pre>', 
        text, 
        flags=re.DOTALL
    )
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–æ–¥
    text = re.sub(
        r'`([^`]+?)`', 
        r'<code>\1</code>', 
        text
    )
    
    # –ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
    text = re.sub(
        r'\*\*([^*]+?)\*\*', 
        r'<b>\1</b>', 
        text
    )
    
    # –ö—É—Ä—Å–∏–≤
    text = re.sub(
        r'\*([^*]+?)\*', 
        r'<i>\1</i>', 
        text
    )
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ H1-H6
    # H1: # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    text = re.sub(
        r'^# (.+)$', 
        r'<b><u>\1</u></b>', 
        text, 
        flags=re.MULTILINE
    )
    
    # H3: ### –ó–∞–≥–æ–ª–æ–≤–æ–∫
    text = re.sub(
        r'^### (.+)$', 
        r'<b>\1</b>', 
        text, 
        flags=re.MULTILINE
    )

        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã (–¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏)
    math_symbols = {
        r'\\int': '‚à´',
        r'\\sum': '‚àë',
        r'\\prod': '‚àè',
        r'\\pm': '¬±',
        r'\\mp': '‚àì',
        r'\\infty': '‚àû',
        r'\\cdot': '¬∑',
        r'\\times': '√ó',
        r'\\div': '√∑',
        r'\\sqrt': '‚àö',
        r'\\pi': 'œÄ',
        r'\\alpha': 'Œ±',
        r'\\beta': 'Œ≤',
        r'\\gamma': 'Œ≥',
        r'\\delta': 'Œ¥',
        r'\\epsilon': 'Œµ',
        r'\\zeta': 'Œ∂',
        r'\\eta': 'Œ∑',
        r'\\theta': 'Œ∏',
        r'\\lambda': 'Œª',
        r'\\mu': 'Œº',
        r'\\xi': 'Œæ',
        r'\\rho': 'œÅ',
        r'\\sigma': 'œÉ',
        r'\\tau': 'œÑ',
        r'\\phi': 'œÜ',
        r'\\psi': 'œà',
        r'\\omega': 'œâ',
        r'\\Delta': 'Œî',
        r'\\Gamma': 'Œì',
        r'\\Theta': 'Œò',
        r'\\Lambda': 'Œõ',
        r'\\Sigma': 'Œ£',
        r'\\Phi': 'Œ¶',
        r'\\Psi': 'Œ®',
        r'\\Omega': 'Œ©',
        r'\\partial': '‚àÇ',
        r'\\nabla': '‚àá',
        r'\\forall': '‚àÄ',
        r'\\exists': '‚àÉ',
        r'\\nexists': '‚àÑ',
        r'\\emptyset': '‚àÖ',
        r'\\in': '‚àà',
        r'\\notin': '‚àâ',
        r'\\subset': '‚äÇ',
        r'\\supset': '‚äÉ',
        r'\\subseteq': '‚äÜ',
        r'\\supseteq': '‚äá',
        r'\\cap': '‚à©',
        r'\\cup': '‚à™',
        r'\\land': '‚àß',
        r'\\lor': '‚à®',
        r'\\neg': '¬¨',
        r'\\equiv': '‚â°',
        r'\\approx': '‚âà',
        r'\\propto': '‚àù',
        r'\\perp': '‚ä•',
        r'\\angle': '‚à†',
        r'\\therefore': '‚à¥',
        r'\\because': '‚àµ',
    }
    
    for pattern, replacement in math_symbols.items():
        text = re.sub(pattern, replacement, text)
    
    # –î—Ä–æ–±–∏ –≤–∏–¥–∞ \frac{a}{b} ‚Üí a/b
    text = re.sub(
        r'\\frac\s*{([^}]+)}\s*{([^}]+)}', 
        r'<i>\1</i>/<i>\2</i>', 
        text
    )
    
    # –ò–Ω—Ç–µ–≥—Ä–∞–ª—ã —Å –ø—Ä–µ–¥–µ–ª–∞–º–∏
    text = re.sub(
        r'\\int\s*_{([^}]+)}\s*^{([^}]+)}', 
        r'‚à´<sub>\1</sub><sup>\2</sup>', 
        text
    )
    
    # –°—É–º–º—ã –∏ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Å –ø—Ä–µ–¥–µ–ª–∞–º–∏
    text = re.sub(
        r'\\sum\s*_{([^}]+)}\s*^{([^}]+)}', 
        r'‚àë<sub>\1</sub><sup>\2</sup>', 
        text
    )
    
    text = re.sub(
        r'\\prod\s*_{([^}]+)}\s*^{([^}]+)}', 
        r'‚àè<sub>\1</sub><sup>\2</sup>', 
        text
    )
    
    # –ò–Ω–¥–µ–∫—Å—ã –∏ —Å—Ç–µ–ø–µ–Ω–∏
    text = re.sub(
        r'\^(\w+)', 
        r'<sup>\1</sup>', 
        text
    )
    
    text = re.sub(
        r'_(\w+)', 
        r'<sub>\1</sub>', 
        text
    )
    
    # –ì—Ä–µ—á–µ—Å–∫–∏–µ –±—É–∫–≤—ã –∏ –¥—Ä—É–≥–∏–µ —Å–∏–º–≤–æ–ª—ã –≤ —Ç–µ–∫—Å—Ç–µ
    text = re.sub(
        r'\\text\s*{([^}]+)}', 
        r'\1', 
        text
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –≤–æ–∫—Ä—É–≥ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    operators = [r'\+', r'-', r'=', r'<', r'>', r'\\leq', r'\\geq', r'\\neq']
    for op in operators:
        text = re.sub(f'({op})', r' \1 ', text)
    
    return text

def get_user_model(user_id):
    """–ü–æ–ª—É—á–∏—Ç—å –º–æ–¥–µ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    return user_models.get(user_id, DEFAULT_MODEL)

def get_model_name(model_id):
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –ø–æ –µ—ë ID"""
    for name, data in AVAILABLE_MODELS.items():
        if data["id"] == model_id:
            return name
    return model_id

def get_model_support_images(model_id):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∏ –º–æ–¥–µ–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    for data in AVAILABLE_MODELS.values():
        if data["id"] == model_id:
            return data["image_support"]
    return False


async def set_main_menu():
    """–°–æ–∑–¥–∞–µ–º –º–µ–Ω—é –∫–æ–º–∞–Ω–¥"""
    main_menu_commands = [
        BotCommand(command='/start', description='–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞'),
        BotCommand(command='/help', description='–ü–æ–º–æ—â—å –∏ –∫–æ–º–∞–Ω–¥—ã'),
        BotCommand(command='/models', description='–í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å –ò–ò'),
        BotCommand(command='/currentmodel', description='–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å'),
    ]
    await bot.set_my_commands(main_menu_commands, scope=BotCommandScopeDefault())


@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer(
        "ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI Chat Bot!</b>\n\n"
        "–Ø –∏—Å–ø–æ–ª—å–∑—É—é —Ä–∞–∑–ª–∏—á–Ω—ã–µ —è–∑—ã–∫–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã.\n\n"
        "üîß <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/models - –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å –ò–ò\n"
        "/currentmodel - –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å\n"
        "/help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n\n"
        "üì∏ <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:</b>\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è! –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –º–æ–¥–µ–ª–∏ (GPT-4o mini, Gemini) –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥!"
    )


@dp.message(Command("help"))
async def help_command(message: types.Message):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    help_text = (
        "üõ†Ô∏è <b>–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:</b>\n\n"
        "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/models - –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å –ò–ò –∏–∑ —Å–ø–∏—Å–∫–∞\n"
        "/currentmodel - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å\n\n"
        "üìö <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:</b>\n"
    )

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π —Å –∏–∫–æ–Ω–∫–æ–π –∫–∞–º–µ—Ä—ã –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    for model_name, model_data in AVAILABLE_MODELS.items():
        camera_icon = " üì∑" if model_data["image_support"] else ""
        help_text += f"‚Ä¢ {model_name}{camera_icon}\n"

    help_text += (
        "\nüì∏ <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:</b>\n"
        "–ú–æ–¥–µ–ª–∏ —Å –∏–∫–æ–Ω–∫–æ–π –∫–∞–º–µ—Ä—ã –º–æ–≥—É—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –ò–ò."
    )

    await message.answer(help_text)


@dp.message(Command("models"))
async def list_models(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π —Å –≥–∞–ª–æ—á–∫–æ–π —É —Ç–µ–∫—É—â–µ–π"""
    await show_models_keyboard(message, message.from_user.id)


async def show_models_keyboard(message: types.Message, user_id: int, edit: bool = False):
    """–ü–æ–∫–∞–∑–∞—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–æ–¥–µ–ª—è–º–∏"""
    builder = InlineKeyboardBuilder()

    current_model_id = get_user_model(user_id)

    for model_name, model_data in AVAILABLE_MODELS.items():
        # –î–æ–±–∞–≤–ª—è–µ–º –≥–∞–ª–æ—á–∫—É –∫ —Ç–µ–∫—É—â–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
        prefix = "‚úÖ " if model_data["id"] == current_model_id else ""
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∫–∞–º–µ—Ä—ã –¥–ª—è –º–æ–¥–µ–ª–µ–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        camera_icon = " üì∑" if model_data["image_support"] else ""
        builder.button(text=f"{prefix}{model_name}{camera_icon}", callback_data=f"model_{model_data['id']}")

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è
    builder.button(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_menu")

    builder.adjust(2, 2, 2)  # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫: 2 –≤ –ø–µ—Ä–≤–æ–º —Ä—è–¥—É, 2 –≤–æ –≤—Ç–æ—Ä–æ–º, 2 –≤ —Ç—Ä–µ—Ç—å–µ–º

    current_model_name = get_model_name(current_model_id)

    if edit:
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.edit_text(
            f"üõ†Ô∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:</b>\n"
            f"üîß –¢–µ–∫—É—â–∞—è: {current_model_name}\n"
            f"üì∏ –ú–æ–¥–µ–ª–∏ —Å –∏–∫–æ–Ω–∫–æ–π –∫–∞–º–µ—Ä—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n\n"
            f"<i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –º–æ–¥–µ–ª—å –¥–ª—è –≤—ã–±–æ—Ä–∞</i>",
            reply_markup=builder.as_markup()
        )
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(
            f"üõ†Ô∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:</b>\n"
            f"üîß –¢–µ–∫—É—â–∞—è: {current_model_name}\n"
            f"üì∏ –ú–æ–¥–µ–ª–∏ —Å –∏–∫–æ–Ω–∫–æ–π –∫–∞–º–µ—Ä—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n\n"
            f"<i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –º–æ–¥–µ–ª—å –¥–ª—è –≤—ã–±–æ—Ä–∞</i>",
            reply_markup=builder.as_markup()
        )


@dp.callback_query(F.data.startswith("model_"))
async def set_model_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏"""
    model_id = callback.data.split("_", 1)[1]
    user_id = callback.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–∞—è –º–æ–¥–µ–ª—å
    model_exists = any(model_data["id"] == model_id for model_data in AVAILABLE_MODELS.values())
    
    if model_exists:
        user_models[user_id] = model_id
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –≤—ã–±–æ—Ä–æ–º
        await show_models_keyboard(callback.message, user_id, edit=True)
        model_name = get_model_name(model_id)
        await callback.answer(f"–ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {model_name}")
    else:
        await callback.answer("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å", show_alert=True)


@dp.callback_query(F.data == "close_menu")
async def close_menu_callback(callback: types.CallbackQuery):
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏"""
    try:
        await callback.message.delete()
    except Exception:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
    await callback.answer("–ú–µ–Ω—é –∑–∞–∫—Ä—ã—Ç–æ")

@dp.message(Command("currentmodel"))
async def current_model(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å"""
    model_id = get_user_model(message.from_user.id)
    model_name = get_model_name(model_id)
    image_support = "–î–∞" if get_model_support_images(model_id) else "–ù–µ—Ç"
    await message.answer(
        f"üîß <b>–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å:</b> {model_name}\n"
        f"üì∏ <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:</b> {image_support}"
    )


async def process_image_message(message: types.Message, image_data: bytes, caption: str = ""):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"""
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞..."
    status_msg = await message.answer(
        f"<i>ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.</i>",
        parse_mode=ParseMode.HTML
    )

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "–ø–µ—á–∞—Ç–∞–µ—Ç" –≤ —á–∞—Ç–µ
    await bot.send_chat_action(message.chat.id, "typing")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        model_id = get_user_model(message.from_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∏ –º–æ–¥–µ–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if not get_model_support_images(model_id):
            await status_msg.delete()
            return await message.answer(
                "‚ö†Ô∏è <b>–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</b>\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /models –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å —Å –∏–∫–æ–Ω–∫–æ–π –∫–∞–º–µ—Ä—ã üì∑"
            )

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64
        base64_image = base64.b64encode(image_data).decode('utf-8')
        mime_type = "image/jpeg"  # Telegram –æ–±—ã—á–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç JPEG

        headers = {
            "Authorization": f"Bearer {OPENROUTER_API_KEY}",
            "HTTP-Referer": "https://your-telegram-bot.com",
            "X-Title": "Telegram Bot",
            "Content-Type": "application/json"
        }

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        content = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å—å
        if caption:
            content.append({"type": "text", "text": caption})
        else:
            content.append({"type": "text", "text": "–û–ø–∏—à–∏ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"})
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        content.append({
            "type": "image_url",
            "image_url": {
                "url": f"data:{mime_type};base64,{base64_image}"
            }
        })

        payload = {
            "model": model_id,
            "messages": [{"role": "user", "content": content}]
        }

        async with aiohttp.ClientSession() as session:
            async with session.post(
                    "https://openrouter.ai/api/v1/chat/completions",
                    headers=headers,
                    json=payload
            ) as response:
                if response.status != 200:
                    error = await response.text()
                    # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    try:
                        await status_msg.delete()
                    except Exception:
                        pass
                    return await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API ({response.status}): {error[:200]}...")

                data = await response.json()
                ai_response = data['choices'][0]['message']['content']

                # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    await status_msg.delete()
                except Exception:
                    pass

                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Markdown –≤ HTML
                formatted_response = convert_markdown_to_html(ai_response)

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –º–æ–¥–µ–ª–∏
                model_name = get_model_name(model_id)
                response_text = f"üß† <b>{model_name}</b>:\n\n{formatted_response}"

                # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏
                if len(response_text) > 4096:
                    for i in range(0, len(response_text), 4096):
                        part = response_text[i:i+4096]
                        await message.answer(part)
                else:
                    await message.answer(response_text)

    except Exception as e:
        # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await status_msg.delete()
        except Exception:
            pass
        await message.answer(f"üö´ –û—à–∏–±–∫–∞: {str(e)}")


@dp.message(F.content_type == ContentType.PHOTO)
async def handle_photo(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ"""
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ —Å —Å–∞–º—ã–º –≤—ã—Å–æ–∫–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
    photo = message.photo[-1]
    
    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
    file = await bot.get_file(photo.file_id)
    image_data = await bot.download_file(file.file_path)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    await process_image_message(message, image_data.read(), message.caption)


@dp.message()
async def handle_message(message: types.Message):
    if not message.text:
        return await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞..."
    status_msg = await message.answer(
        f"<i>ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.</i>",
        parse_mode=ParseMode.HTML
    )

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "–ø–µ—á–∞—Ç–∞–µ—Ç" –≤ —á–∞—Ç–µ
    await bot.send_chat_action(message.chat.id, "typing")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        model_id = get_user_model(message.from_user.id)

        headers = {
            "Authorization": f"Bearer {OPENROUTER_API_KEY}",
            "HTTP-Referer": "https://your-telegram-bot.com",
            "X-Title": "Telegram Bot",
            "Content-Type": "application/json"
        }

        payload = {
            "model": model_id,
            "messages": [{"role": "user", "content": message.text}]
        }

        async with aiohttp.ClientSession() as session:
            async with session.post(
                    "https://openrouter.ai/api/v1/chat/completions",
                    headers=headers,
                    json=payload
            ) as response:
                if response.status != 200:
                    error = await response.text()
                    # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    try:
                        await status_msg.delete()
                    except Exception:
                        pass
                    return await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API ({response.status}): {error[:200]}...")

                data = await response.json()
                ai_response = data['choices'][0]['message']['content']

                # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    await status_msg.delete()
                except Exception:
                    pass

                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Markdown –≤ HTML
                formatted_response = convert_markdown_to_html(ai_response)

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –º–æ–¥–µ–ª–∏
                model_name = get_model_name(model_id)
                response_text = f"üß† <b>{model_name}</b>:\n\n{formatted_response}"

                # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏
                if len(response_text) > 4096:
                    for i in range(0, len(response_text), 4096):
                        part = response_text[i:i+4096]
                        await message.answer(part)
                else:
                    await message.answer(response_text)

    except Exception as e:
        # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await status_msg.delete()
        except Exception:
            pass
        await message.answer(f"üö´ –û—à–∏–±–∫–∞: {str(e)}")


async def main():
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
    await set_main_menu()

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    print(f"–¢–æ–∫–µ–Ω –±–æ—Ç–∞: {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if API_TOKEN else '–ù–ï–¢'}")
    print(f"–ö–ª—é—á OpenRouter: {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if OPENROUTER_API_KEY else '–ù–ï–¢'}")
    print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: {', '.join(AVAILABLE_MODELS.keys())}")
    print(f"–ú–æ–¥–µ–ª–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:")
    for name, data in AVAILABLE_MODELS.items():
        if data["image_support"]:
            print(f"  - {name}")
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())